# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: NuGet Pack & Push

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:      
    
jobs:
  build:

    runs-on: windows-latest
    
    env:
      Configuration: Release
      Solution: TG.Common.sln
      PkgProject: src/TG.Common/TG.Common.csproj
      Test_Project_Path: tests/UnitTests/UnitTests.csproj

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # - name: Setup .NET
    #   uses: actions/setup-dotnet@v2
    #   with:
    #     dotnet-version: 6.0.x
    - name: SetNuGet
      env: 
        NUGET_TOKEN: ${{ secrets.NUGET_KEY }}
      run: nuget setapikey $NUGET_TOKEN -Source https://api.nuget.org/v3/index.json -ConfigFile NuGet.Config

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1.3

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution /t:Restore /p:Configuration=$env:Configuration

    # Execute all unit tests in the solution
    # - name: Execute unit tests
    #   run: dotnet test $env:Test_Project_Path

    - name: Pack & Push
      run: |
        msbuild $env:PkgProject /t:pack /p:Configuration=$env:Configuration
        dotnet nuget push src\TG.Common\bin\Release\*.nupkg --api-key "$NUGET_TOKEN" --source NuGet.Config --skip-duplicate
        dotnet nuget push src\TG.Common\bin\Release\*.snupkg --api-key "$NUGET_TOKEN" --source NuGet.Config --skip-duplicate
      env:
        NUGET_TOKEN: ${{ secrets.NUGET_KEY }}
