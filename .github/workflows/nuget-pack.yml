# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: NuGet Pack & Push

concurrency:
  group: nuget-publish
  cancel-in-progress: true

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:      
    
jobs:
  build:
    name: 'PackPush'
    runs-on: ubuntu-latest
    
    env:
      Configuration: Release
      Solution: TG.Common.sln
      PkgProject: src/TG.Common/TG.Common.csproj
      Test_Project_Path: tests/UnitTests/UnitTests.csproj

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x'

    - name: Restore
      run: |
        dotnet restore "$Solution"
      shell: bash

    - name: Build
      run: |
        dotnet build "$Solution" -c "$Configuration" --no-restore
      shell: bash

    - name: Test
      run: |
        dotnet test "$Test_Project_Path" -c "$Configuration" --no-build --verbosity minimal
      shell: bash

    - name: Pack
      run: |
        dotnet pack "$PkgProject" -c "$Configuration" --no-build
      shell: bash
      env:
        NUGET_TOKEN: ${{ secrets.NUGET_KEY }}

    - name: Push to NuGet.org
      run: |
        dotnet nuget push src/TG.Common/bin/Release/*.nupkg --api-key "$NUGET_TOKEN" --source https://api.nuget.org/v3/index.json --skip-duplicate
      shell: bash
      env:
        NUGET_TOKEN: ${{ secrets.NUGET_KEY }}

    - name: Push symbol package to NuGet.org
      run: |
        dotnet nuget push src/TG.Common/bin/Release/*.snupkg --api-key "$NUGET_TOKEN" --source https://api.nuget.org/v3/index.json --skip-duplicate
      shell: bash
      env:
        NUGET_TOKEN: ${{ secrets.NUGET_KEY }}